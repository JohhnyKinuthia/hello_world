# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
executors:
  aws-executor:
    docker:
      - image: amazon/aws-cli
commands:
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            aws cloudformation delete-stack \
             --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
  create_and_deploy_front_end:
    executor: aws-executor
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  get_last_deployment_id:
    executor: aws-executor
    working_directory: ~/
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
  promote_to_production:
    executor: aws-executor
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
  clean_up_old_front_end:
    executor: aws-executor
    working_directory: ~/
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destory the previous S3 bucket and CloudFormation stack.
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
  create_infrastructure:
    executor: aws-executor
    # working_directory: /tmp/ansible/
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Create CloudFormation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      # - run:
      #     name: Get IP address of EC2 instances
      #     command: |
      #       echo "[aws]" >> inventory.cfg
      #       aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --output text >> inventory.cfg
      #       cat inventory.cfg
      # - persist_to_workspace:
      #     root: /tmp/ansible/
      #     paths:
      #       - inventory.cfg
  configure_infrastructure:
    docker:
      - image: cimg/python:3.8
    working_directory: /tmp/ansible/
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/ansible/
      - add_ssh_keys:
          fingerprints:
            - "2a:cd:12:a2:74:23:81:3c:98:cf:da:84:fd:9b:41:06"
      - run:
          name: Install ansible
          command: |
            sudo apt-get update
            sudo apt-get install software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt-get install ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat inventory.cfg
            ansible-playbook -i inventory.cfg playbook.yml
  smoke_test:
    executor: aws-executor
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          #simulate failure
          command: return 1
      - destroy_environment
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
